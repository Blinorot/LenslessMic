defaults:
  - model: PSF_Unet4M_U5_Unet4M
  - writer: wandb
  - metrics: main
  - datasets: main_short_test
  - dataloader: main
  - transforms: padcrop
  - codec: dac
  - reconstruction: 16x16
  - psf: simulate
  - lr_scheduler: constant
  - _self_
optimizer:
  _target_: torch.optim.Adam
  lr: 3e-4
loss_function:
  _target_: src.loss.ReconstructionLoss
  codec_mse_coef: 1
  codec_ssim_coef: 1
  codec_gmsd_coef: 0
  raw_codec_ssim_coef: 1
  raw_codec_l1_coef: 1
  audio_l1_coef: 1
  audio_sisdr_coef: 0
  audio_stft_coef: 0
  audio_mel_coef: 0
  audio_stft_config:
    window_lengths: [2048, 512]
  audio_mel_config:
    n_mels: [5, 10, 20, 40]
    window_lengths: [32, 64, 128, 256]
    mel_fmin: [0, 0, 0, 0]
    mel_fmax: [null, null, null, null]
    pow: 1.0
    clamp_eps: 1.0e-5
    mag_weight: 0.0
  resize_coef: ${reconstruction.resize_coef}
trainer:
  log_step: 50
  n_epochs: 100
  epoch_len: 500
  device_tensors: ["lensless_codec_video", "lensed_codec_video", "lensless_psf", "audio"] # which tensors should be on device (ex. GPU)
  resume_from: null # null or path to the checkpoint dir with *.pth and config.yaml
  device: auto # device name or "auto"
  override: False # if True, will override the previous run with the same name
  monitor: "max test_PSNR" # "off" or "max/min metric_name", i.e. our goal is to maximize/minimize metric
  save_period: 5 # checkpoint each save_period epochs in addition to the best epoch
  early_stop: ${trainer.n_epochs} # epochs for early stopping
  save_dir: "saved"
  seed: 1
